# -*- coding: utf-8 -*-
"""berkturetken_the3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13HKjV1D0kdBB4TuDlpPo_HZg0tDMmxi0
"""

#Berk Turetken
#27.04.2020
#IF100, Take-Home Exam #3

#Getting the input for products
products = input("Products in shopping cart: ")
underscore_number = products.count('_')
comma_number = products.count(',')

#Input check for products
while(not(underscore_number > 3 and underscore_number % 4 == 0 and underscore_number == (comma_number + 1) * 4)):
  print("Invalid input for products, please enter in correct format.")
  products = input("Products in shopping cart: ")
  underscore_number = products.count('_')
  comma_number = products.count(',')

#Getting the input for family members information
family_infos = input("Family members' informations: ")
underscore_number = family_infos.count('_')
comma_number = family_infos.count(',')

#Input check for family members information
while (not(underscore_number > 2 and underscore_number % 3 == 0 and underscore_number == (comma_number + 1) * 3)):
  print("Invalid input for family information, please enter in correct format.")
  family_infos = input("Family members' informations: ")
  underscore_number = family_infos.count('_')
  comma_number = family_infos.count(',')


#Calculating total amount of fat, carbohydrate, and protein in all the products bought
products = products.split(',')
total_fat_in_gram = 0
total_carbohydrate_in_gram = 0
total_protein_in_gram = 0

for product in products:
  product = product.split('_')
  quantity = int(product[1])
  fat = int(product[2])
  carbohydrate = int(product[3])
  protein = int(product[4])
  
  total_fat_in_gram += quantity * fat
  total_carbohydrate_in_gram += quantity * carbohydrate
  total_protein_in_gram += quantity * protein

#Calculating each household member's calorie needs per day
family_infos = family_infos.split(',')
needed_calory_per_day = 0

for family_member_infos in family_infos:
  family_member_infos = family_member_infos.split('_')
  gender = family_member_infos[0]
  weight = int(family_member_infos[1])
  height = int(family_member_infos[2])
  age = int(family_member_infos[3])

  if(gender == 'M'):
    needed_calory_per_day += 66.5 + 13.8 * weight + 5.0 * height - 6.8 * age
  else:   #Gender == 'F'
    needed_calory_per_day += 655.1 + 9.6 * weight + 1.9 * height - 4.7 * age

#Conversion: Weights in gram -> Calorie
total_fat_in_calory = total_fat_in_gram * 9
total_carbohydrate_in_calory = total_carbohydrate_in_gram * 4
total_protein_in_calory = total_protein_in_gram * 4

#A person's daily diet specifications
daily_needed_fat = 0.3 * needed_calory_per_day
daily_needed_carbohydrate = 0.5 * needed_calory_per_day
daily_needed_protein = 0.2 * needed_calory_per_day

#Calculating the days for each type of nutrient that will be enough
enough_days_for_fat = int(total_fat_in_calory / daily_needed_fat)
enough_days_for_carbohydrate = int(total_carbohydrate_in_calory / daily_needed_carbohydrate)
enough_days_for_protein = int(total_protein_in_calory / daily_needed_protein)

#Corresponding print messages
if(enough_days_for_fat < 1):
  print("You need to add products with more fat to your shopping cart.")
else:
  print("These products will be enough for your family in terms of fat for ", enough_days_for_fat, " days.", sep="")

if(enough_days_for_carbohydrate < 1):
  print("You need to add products with more carb to your shopping cart.")
else:
  print("These products will be enough for your family in terms of carbohydrate for ", enough_days_for_carbohydrate, " days.", sep="")

if(enough_days_for_protein < 1):
  print("You need to add products with more protein to your shopping cart.")
else:
  print("These products will be enough for your family in terms of protein for ", enough_days_for_protein, " days.", sep="")